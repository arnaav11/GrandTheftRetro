let state = 1
let ang = 0
let angSpeed = 0.01*Math.PI
let speed = 0
let playerX = 100
let playerY = 100
let dir = [Math.cos(ang), Math.sin(ang)]
let maxSpeed = 2
let accel = 0
let maxAccel = 1
let dAcc = 0.01
let friction = 0.03

let obstructions = []
let npcCars = []

let img;
let maskImg
function preload() {
  map1 = loadImage('Game_map.png');
  img = loadImage('loadImage_0.png'); 
  
  
}


function handleMovementInput(){
  if (keyIsDown(87)){
    accel += dAcc
    speedCheck(true)
  }
  if (keyIsDown(65)){
    ang -= angSpeed
    speedCheck(false)
  }
  if (keyIsDown(83)){
    accel -= dAcc
    speedCheck(true)
  }
  if (keyIsDown(68)){
    ang += angSpeed
    speedCheck(false)
  }
}

function handleMovement(){
  dir = [Math.cos(ang), Math.sin(ang)]

  let dx = dir[0]*speed
  let dy = dir[1]*speed
  playerX += dx
  playerY += dy
}

function speedCheck(wOrS){

  speed += accel

  if (speed > maxSpeed){
    speed = maxSpeed
  }
  else if (speed < -maxSpeed){
    speed = -maxSpeed
  }

  if (accel > maxAccel){
    accel = maxAccel
  }
  else if (accel < -maxAccel){
    accel = -maxAccel
  }

  if (!wOrS){
    accel = 0
    if (speed >= friction){
      speed -= friction
    }
    else if(speed <= -friction){
      speed += friction
    }
  }

}

function gameDraw(){
  background(220)
  image(map1, -480, -270)
  handleMovement()
  drawPlayer()
  barrier()
  houses()

  
  if (keyIsPressed == true){
    handleMovementInput()
  }
  else{
    speedCheck(false)
  }
}

function draw() {
    push();
  if (state == 1){
    gameDraw()
  }
}

  // for da car
function setup() {
  createCanvas(960, 540, WEBGL)
  background(220)
  texture(img);
  maskImg = createGraphics(50, 50);
  noFill()
  maskImg.beginShape()
  maskImg.ellipse(25,25,50,50)
  maskImg.endShape()
}

// also for da car
function drawPlayer() {
    img.mask(maskImg)
    push(); 
    translate(playerX, playerY);
    rotate(ang);
    texture(img); 
    strokeWeight(1)
    image(img, -25 , -25, 50, 50);
    pop()
}

function houses() {
  let house = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 32]
  // houses are numbered from left to right starting from top left
  strokeWeight(1)
    house[0] = rect(-445,-210,50,50) // house 1
    house[1] = rect(-350,-210,50,50) // house 2
    house[2] = rect(-245,-210,50,50) // house 3
    house[3] = rect(-151,-210,50,50) // house 4
    house[4] = rect(-50,-210,80,50)  // house 5
    house[5] = rect(65,-210,60,50)   // house 6
    house[6] = rect(167,-215,50,50) // house 7
    house[7] = rect(270,-210,60,50) // house 8
    house[8] = rect(380,-210,60,50) // house 9 
  // END OF ROW 1 HOUSES 1-9
    house[9] = rect(-405,-105, 50,50) // house 10
    house[10] = rect(-300,-105, 50,50) // house 11
    house[11] = rect(-210,-105, 50,50) // house 12
    house[12] = rect(-120,-105, 70,50) // house 13
    house[13] = rect(55,-105, 50,50) // house 14
    house[14] = rect(155,-105, 50,50) // house 15
    house[15] = rect(250,-105, 50,50) // house 16
    house[16] = rect(345,-105, 55,50) // house 17
  // END OF ROW 2 HOUSES 10-17
    house[17] = rect(-405,10, 60,50) // house 18
    house[18] = rect(-295,10, 60,50) // house 19
    house[19] = rect(-196,10, 50,50) // house 20
    house[20] = rect(-108,10, 60,50) // house 21
    house[21] = rect(50,10, 65,50) // house 22
    house[22] = rect(150,10, 60,50) // house 23
    house[23] = rect(260,10, 60,50) // house 24
    house[24] = rect(350,10, 50,50) // house 25
  // END OF ROW 3 HOUSES 18-25
    house[25] = rect(-425,120, 60,50) // house 26
    house[26] = rect(-317,120, 60,50) // house 27
    house[27] = rect(-210,120, 60,50) // house 28
    house[28] = rect(-115,120, 60,50) // house 29
    house[29] = rect(40,120, 60,50) // house 30
    house[30] = rect(153,120, 50,50) // house 31
    house[31] = rect(260,120, 60,50) // house 32
    house[32] = rect(360,120, 60,50) // house 33
  // FINAL ROW END OF ROW 4 HOUSES 26-33
}

function barrier(){
  noFill()
  strokeWeight(1)
  rect(-470, -265, 940, 20) // top barrier 
  rect(-470, 250, 940, 20) //  bottom barrier 
  rect(480, -215, 30, 450) // cant go off right side
  rect(-510, -215, 30, 450) // cant go off left side
}

